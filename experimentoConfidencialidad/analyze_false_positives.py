#!/usr/bin/env python3
"""
Analizador de falsos positivos en logs de CloudWatch
Identifica usuarios leg√≠timos que est√°n siendo denegados incorrectamente
"""

import boto3
import json
from datetime import datetime, timedelta

def analyze_false_positives():
    """Analizar logs para identificar posibles falsos positivos"""
    
    # Patrones que sugieren falsos positivos:
    false_positive_patterns = {
        'legitimate_travel': {
            'description': 'Usuario viajando leg√≠timamente',
            'indicators': [
                'risk_score entre 0.4-0.8',
                'denegaci√≥n por geograf√≠a',
                'usuario con historial limpio'
            ]
        },
        'emergency_access': {
            'description': 'Acceso m√©dico de emergencia',
            'indicators': [
                'fuera de horario laboral',
                'departamento m√©dico',
                'IP desde hospital/cl√≠nica'
            ]
        },
        'remote_worker': {
            'description': 'Trabajador remoto leg√≠timo',
            'indicators': [
                'IP p√∫blica nueva',
                'dispositivo conocido',
                'patr√≥n de trabajo remoto'
            ]
        }
    }
    
    print("üîç AN√ÅLISIS DE FALSOS POSITIVOS")
    print("=" * 50)
    
    for pattern_name, pattern_info in false_positive_patterns.items():
        print(f"\nüìã {pattern_info['description']}:")
        for indicator in pattern_info['indicators']:
            print(f"   ‚Ä¢ {indicator}")
    
    print(f"\nüí° RECOMENDACIONES:")
    print("1. Implementar MFA challenge para cambios geogr√°ficos")
    print("2. Excepciones por departamento (m√©dico, emergencias)")
    print("3. Registro de dispositivos conocidos")
    print("4. Umbrales adaptativos por contexto")
    print("5. Proceso de whitelist temporal para viajes")

if __name__ == "__main__":
    analyze_false_positives()
